{"ast":null,"code":"// 입력 검색어 제안 기능 - API 호출 관련 함수\n// suggestionService.js\nexport const fetchSuggestions=async keyword=>{try{const response=await fetch(\"https://dapi.kakao.com/v2/local/search/keyword.json?query=\".concat(encodeURIComponent(keyword)),{headers:{Authorization:\"KakaoAK \".concat(process.env.REACT_APP_KAKAO_MAP_REST_API_KEY)}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();return data.documents.map(item=>({place_name:item.place_name,address_name:item.address_name,lat:item.y,lng:item.x}));// 카카오 API의 응답에서 실제 제안 목록을 반환\n}catch(error){console.error(\"Error fetching suggestions:\",error);return[];// 에러 발생 시 빈 배열 반환\n}};// 사용자가 검색 제안 목록에서 한 개 선택시 해당 좌표를 가져옴\nexport const fetchCoordinates=async placeName=>{try{const response=await fetch(\"https://dapi.kakao.com/v2/local/search/keyword.json?query=\".concat(encodeURIComponent(placeName)),{headers:{Authorization:\"KakaoAK \".concat(process.env.REACT_APP_KAKAO_MAP_REST_API_KEY)}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();return data.documents[0]?{lat:data.documents[0].y,lng:data.documents[0].x}:null;}catch(error){console.log(\"Error fetching coordinates: \",error);return null;// 좌표 가져오기 오류 시 null 반환\n}};// 사용자가 지도 영역 옮길 때마다 지도 영역 요청\nexport const fetchBoundaryOrganizations=async(swLatLng,neLatLng)=>{try{const response=await fetch(\"http://124.49.226.94:9999/api/organizations\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({southWest:{lat:swLatLng.getLat(),lng:swLatLng.getLng()},nortEast:{lat:neLatLng.getLat(),lng:neLatLng.getLng()}})});if(!response.ok){throw new Error(\"HTTP error. status: \".concat(response.status));}return await response.json();// 백엔드로부터 받은 데이터 반환\n}catch(error){console.error(\"Error fetching organizations within bounds (경계 정보 가져오면서 오류 발생):, error \");return null;// 에러 발생 시 null 반환\n}};","map":{"version":3,"names":["fetchSuggestions","keyword","response","fetch","concat","encodeURIComponent","headers","Authorization","process","env","REACT_APP_KAKAO_MAP_REST_API_KEY","ok","Error","status","data","json","documents","map","item","place_name","address_name","lat","y","lng","x","error","console","fetchCoordinates","placeName","log","fetchBoundaryOrganizations","swLatLng","neLatLng","method","body","JSON","stringify","southWest","getLat","getLng","nortEast"],"sources":["D:/Users/PJH/Dongguk/tax-map-frontend/src/services/suggestionService.js"],"sourcesContent":["// 입력 검색어 제안 기능 - API 호출 관련 함수\r\n// suggestionService.js\r\n\r\nexport const fetchSuggestions = async (keyword) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://dapi.kakao.com/v2/local/search/keyword.json?query=${encodeURIComponent(\r\n        keyword\r\n      )}`,\r\n      {\r\n        headers: {\r\n          Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_MAP_REST_API_KEY}`,\r\n        },\r\n      }\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data.documents.map((item) => ({\r\n      place_name: item.place_name,\r\n      address_name: item.address_name,\r\n      lat: item.y,\r\n      lng: item.x,\r\n    })); // 카카오 API의 응답에서 실제 제안 목록을 반환\r\n  } catch (error) {\r\n    console.error(\"Error fetching suggestions:\", error);\r\n    return []; // 에러 발생 시 빈 배열 반환\r\n  }\r\n};\r\n\r\n// 사용자가 검색 제안 목록에서 한 개 선택시 해당 좌표를 가져옴\r\nexport const fetchCoordinates = async (placeName) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://dapi.kakao.com/v2/local/search/keyword.json?query=${encodeURIComponent(\r\n        placeName\r\n      )}`,\r\n      {\r\n        headers: {\r\n          Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_MAP_REST_API_KEY}`,\r\n        },\r\n      }\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data.documents[0]\r\n      ? { lat: data.documents[0].y, lng: data.documents[0].x }\r\n      : null;\r\n  } catch (error) {\r\n    console.log(\"Error fetching coordinates: \", error);\r\n    return null; // 좌표 가져오기 오류 시 null 반환\r\n  }\r\n};\r\n\r\n// 사용자가 지도 영역 옮길 때마다 지도 영역 요청\r\nexport const fetchBoundaryOrganizations = async (swLatLng, neLatLng) => {\r\n  try {\r\n    const response = await fetch(\r\n      `http://124.49.226.94:9999/api/organizations`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          southWest: { lat: swLatLng.getLat(), lng: swLatLng.getLng() },\r\n          nortEast: { lat: neLatLng.getLat(), lng: neLatLng.getLng() },\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error. status: ${response.status}`);\r\n    }\r\n    return await response.json(); // 백엔드로부터 받은 데이터 반환\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error fetching organizations within bounds (경계 정보 가져오면서 오류 발생):, error \"\r\n    );\r\n    return null; // 에러 발생 시 null 반환\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}