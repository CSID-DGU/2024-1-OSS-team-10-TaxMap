{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\PJH\\\\Dongguk\\\\tax-map-frontend\\\\src\\\\components\\\\MapContent\\\\MapContent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./MapContent.css\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport clicked_largest_icon from \"../../assets/images/markers/marker_icon_largest_clicked.png\";\nimport clicked_middle_icon from \"../../assets/images/markers/marker_icon_middle_clicked.png\";\nimport clicked_low_icon from \"../../assets/images/markers/marker_icon_low_clicked.png\";\nimport largest_icon from \"../../assets/images/markers/marker_icon_largest.png\";\nimport middle_icon from \"../../assets/images/markers/marker_icon_middle_clicked.png\";\nimport low_icon from \"../../assets/images/markers/marker_icon_low.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapContent({\n  coordinates,\n  selectedDepartment\n}) {\n  _s();\n  const mapContainerRef = useRef(null);\n  const [markers, setMarkers] = useState([]);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [clickMarker, setClickMarker] = useState(null);\n  const mapRef = useRef(null);\n  const closeSidebar = () => {\n    setSelectedMarker(null);\n    setClickMarker(null);\n  };\n  const loadMarkers = async map => {\n    const bounds = map.getBounds();\n    const swLatLng = bounds.getSouthWest();\n    const neLatLng = bounds.getNorthEast();\n    const requestBody = {\n      minLat: swLatLng.getLat(),\n      maxLat: neLatLng.getLat(),\n      minLng: swLatLng.getLng(),\n      maxLng: neLatLng.getLng()\n    };\n    if (selectedDepartment) {\n      requestBody.govOfficeFilter = selectedDepartment;\n    }\n    console.log(\"API Request Body:\", requestBody); // API 요청 본문 출력\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/map/view`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"API Response Data:\", data); // API 응답 데이터 전체 출력\n\n        const markerMap = {};\n        data.forEach(marker => {\n          if (!markerMap[marker.address]) {\n            markerMap[marker.address] = marker;\n          }\n        });\n        const expenses = Object.values(markerMap);\n\n        // 이전에 생성된 마커 삭제\n        markers.forEach(marker => {\n          marker.setMap(null); // 기존 마커 제거\n        });\n        const newMarkers = [];\n\n        // 선택된 부처에 해당하는 마커만 표시하도록 수정\n        expenses.forEach(markerData => {\n          console.log(\"Marker Data:\", markerData); // 마커 데이터 전체 로그 출력\n          // markerData.govOffice 필드가 있는지 확인\n          console.log(\"Marker Data govOffice:\", markerData.govOffice);\n          if (!selectedDepartment || markerData.govOffice === selectedDepartment) {\n            let markerImage;\n            if (markerData.maxTotalSubsidy >= 100000000) {\n              markerImage = largest_icon;\n            } else if (markerData.maxTotalSubsidy >= 50000000) {\n              markerImage = middle_icon;\n            } else {\n              markerImage = low_icon;\n            }\n            const marker = new window.kakao.maps.Marker({\n              position: new window.kakao.maps.LatLng(markerData.latitude, markerData.longitude),\n              title: markerData.address,\n              image: new window.kakao.maps.MarkerImage(markerImage, new window.kakao.maps.Size(24, 35))\n            });\n            marker.setMap(map); // 마커를 지도에 추가\n\n            console.log(\"Marker added to map:\", marker); // 마커가 지도에 추가되었는지 확인\n\n            window.kakao.maps.event.addListener(marker, \"click\", async () => {\n              if (clickMarker) {\n                const {\n                  marker: prevMarker,\n                  data: prevData\n                } = clickMarker;\n                let previousMarkerImage;\n                if (prevData.maxTotalSubsidy >= 100000000) {\n                  previousMarkerImage = largest_icon;\n                } else if (prevData.maxTotalSubsidy >= 50000000) {\n                  previousMarkerImage = middle_icon;\n                } else {\n                  previousMarkerImage = low_icon;\n                }\n                prevMarker.setImage(new window.kakao.maps.MarkerImage(previousMarkerImage, new window.kakao.maps.Size(24, 35)));\n              }\n              let clickedMarkerImage;\n              if (markerData.maxTotalSubsidy >= 100000000) {\n                clickedMarkerImage = clicked_largest_icon;\n              } else if (markerData.maxTotalSubsidy >= 50000000) {\n                clickedMarkerImage = clicked_middle_icon;\n              } else {\n                clickedMarkerImage = clicked_low_icon;\n              }\n              marker.setImage(new window.kakao.maps.MarkerImage(clickedMarkerImage, new window.kakao.maps.Size(24, 35)));\n              if (clickMarker && clickMarker.marker === marker) {\n                marker.setImage(new window.kakao.maps.MarkerImage(markerImage, new window.kakao.maps.Size(24, 35)));\n                setClickMarker(null);\n                return;\n              }\n              setClickMarker({\n                marker,\n                data: markerData\n              });\n              console.log(\"Marker Data:\", markerData);\n              try {\n                const orgSubsidies = await Promise.all(markerData.organizations.map(async org => {\n                  const subsidyPromises = org.subsidies.map(async sub => {\n                    try {\n                      const subsidyResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/subsidy/${sub.id}`);\n                      if (subsidyResponse.ok) {\n                        return await subsidyResponse.json();\n                      } else {\n                        console.error(`Failed to fetch subsidy details for subsidy ID: ${sub.id}`);\n                        return null;\n                      }\n                    } catch (subError) {\n                      console.error(`Error fetching subsidy details for subsidy ID: ${sub.id}`, subError);\n                      return null;\n                    }\n                  });\n                  return {\n                    ...org,\n                    subsidies: await Promise.all(subsidyPromises).then(results => results.filter(res => res !== null))\n                  };\n                }));\n                setSelectedMarker({\n                  ...markerData,\n                  organizations: orgSubsidies\n                });\n              } catch (orgError) {\n                console.error(\"Error fetching organizations subsidies details:\", orgError);\n              }\n            });\n            newMarkers.push(marker);\n          }\n        });\n        setMarkers(newMarkers);\n      } else {\n        throw new Error(\"Failed to fetch markers\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching organizations within bounds:\", error);\n    }\n  };\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY}&autoload=false`;\n    document.head.appendChild(script);\n    script.onload = () => {\n      window.kakao.maps.load(async () => {\n        const options = {\n          center: new window.kakao.maps.LatLng(coordinates.lat, coordinates.lng),\n          level: 4\n        };\n        const map = new window.kakao.maps.Map(mapContainerRef.current, options);\n        mapRef.current = map;\n        loadMarkers(map);\n        window.kakao.maps.event.addListener(map, \"bounds_changed\", () => loadMarkers(map));\n      });\n    };\n  }, [coordinates, selectedDepartment]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), selectedMarker && /*#__PURE__*/_jsxDEV(Sidebar, {\n      marker: selectedMarker,\n      onClose: closeSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s(MapContent, \"dyNMOcWCEVD3ZsY9G4qBuUrUU7w=\");\n_c = MapContent;\nexport default MapContent;\nvar _c;\n$RefreshReg$(_c, \"MapContent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Sidebar","clicked_largest_icon","clicked_middle_icon","clicked_low_icon","largest_icon","middle_icon","low_icon","jsxDEV","_jsxDEV","MapContent","coordinates","selectedDepartment","_s","mapContainerRef","markers","setMarkers","selectedMarker","setSelectedMarker","clickMarker","setClickMarker","mapRef","closeSidebar","loadMarkers","map","bounds","getBounds","swLatLng","getSouthWest","neLatLng","getNorthEast","requestBody","minLat","getLat","maxLat","minLng","getLng","maxLng","govOfficeFilter","console","log","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","data","json","markerMap","forEach","marker","address","expenses","Object","values","setMap","newMarkers","markerData","govOffice","markerImage","maxTotalSubsidy","window","kakao","maps","Marker","position","LatLng","latitude","longitude","title","image","MarkerImage","Size","event","addListener","prevMarker","prevData","previousMarkerImage","setImage","clickedMarkerImage","orgSubsidies","Promise","all","organizations","org","subsidyPromises","subsidies","sub","subsidyResponse","id","error","subError","then","results","filter","res","orgError","push","Error","script","document","createElement","src","REACT_APP_KAKAO_MAP_API_KEY","head","appendChild","onload","load","options","center","lat","lng","level","Map","current","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c","$RefreshReg$"],"sources":["D:/Users/PJH/Dongguk/tax-map-frontend/src/components/MapContent/MapContent.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./MapContent.css\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport clicked_largest_icon from \"../../assets/images/markers/marker_icon_largest_clicked.png\";\r\nimport clicked_middle_icon from \"../../assets/images/markers/marker_icon_middle_clicked.png\";\r\nimport clicked_low_icon from \"../../assets/images/markers/marker_icon_low_clicked.png\";\r\nimport largest_icon from \"../../assets/images/markers/marker_icon_largest.png\";\r\nimport middle_icon from \"../../assets/images/markers/marker_icon_middle_clicked.png\";\r\nimport low_icon from \"../../assets/images/markers/marker_icon_low.png\";\r\n\r\nfunction MapContent({ coordinates, selectedDepartment }) {\r\n  const mapContainerRef = useRef(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n  const [clickMarker, setClickMarker] = useState(null);\r\n  const mapRef = useRef(null);\r\n\r\n  const closeSidebar = () => {\r\n    setSelectedMarker(null);\r\n    setClickMarker(null);\r\n  };\r\n\r\n  const loadMarkers = async (map) => {\r\n    const bounds = map.getBounds();\r\n    const swLatLng = bounds.getSouthWest();\r\n    const neLatLng = bounds.getNorthEast();\r\n\r\n    const requestBody = {\r\n      minLat: swLatLng.getLat(),\r\n      maxLat: neLatLng.getLat(),\r\n      minLng: swLatLng.getLng(),\r\n      maxLng: neLatLng.getLng(),\r\n    };\r\n\r\n    if (selectedDepartment) {\r\n      requestBody.govOfficeFilter = selectedDepartment;\r\n    }\r\n\r\n    console.log(\"API Request Body:\", requestBody); // API 요청 본문 출력\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/api/map/view`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(requestBody),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        console.log(\"API Response Data:\", data); // API 응답 데이터 전체 출력\r\n\r\n        const markerMap = {};\r\n        data.forEach((marker) => {\r\n          if (!markerMap[marker.address]) {\r\n            markerMap[marker.address] = marker;\r\n          }\r\n        });\r\n\r\n        const expenses = Object.values(markerMap);\r\n\r\n        // 이전에 생성된 마커 삭제\r\n        markers.forEach((marker) => {\r\n          marker.setMap(null); // 기존 마커 제거\r\n        });\r\n\r\n        const newMarkers = [];\r\n\r\n        // 선택된 부처에 해당하는 마커만 표시하도록 수정\r\n        expenses.forEach((markerData) => {\r\n          console.log(\"Marker Data:\", markerData); // 마커 데이터 전체 로그 출력\r\n          // markerData.govOffice 필드가 있는지 확인\r\n          console.log(\"Marker Data govOffice:\", markerData.govOffice);\r\n\r\n          if (\r\n            !selectedDepartment ||\r\n            markerData.govOffice === selectedDepartment\r\n          ) {\r\n            let markerImage;\r\n            if (markerData.maxTotalSubsidy >= 100000000) {\r\n              markerImage = largest_icon;\r\n            } else if (markerData.maxTotalSubsidy >= 50000000) {\r\n              markerImage = middle_icon;\r\n            } else {\r\n              markerImage = low_icon;\r\n            }\r\n\r\n            const marker = new window.kakao.maps.Marker({\r\n              position: new window.kakao.maps.LatLng(\r\n                markerData.latitude,\r\n                markerData.longitude\r\n              ),\r\n              title: markerData.address,\r\n              image: new window.kakao.maps.MarkerImage(\r\n                markerImage,\r\n                new window.kakao.maps.Size(24, 35)\r\n              ),\r\n            });\r\n\r\n            marker.setMap(map); // 마커를 지도에 추가\r\n\r\n            console.log(\"Marker added to map:\", marker); // 마커가 지도에 추가되었는지 확인\r\n\r\n            window.kakao.maps.event.addListener(marker, \"click\", async () => {\r\n              if (clickMarker) {\r\n                const { marker: prevMarker, data: prevData } = clickMarker;\r\n                let previousMarkerImage;\r\n                if (prevData.maxTotalSubsidy >= 100000000) {\r\n                  previousMarkerImage = largest_icon;\r\n                } else if (prevData.maxTotalSubsidy >= 50000000) {\r\n                  previousMarkerImage = middle_icon;\r\n                } else {\r\n                  previousMarkerImage = low_icon;\r\n                }\r\n                prevMarker.setImage(\r\n                  new window.kakao.maps.MarkerImage(\r\n                    previousMarkerImage,\r\n                    new window.kakao.maps.Size(24, 35)\r\n                  )\r\n                );\r\n              }\r\n\r\n              let clickedMarkerImage;\r\n              if (markerData.maxTotalSubsidy >= 100000000) {\r\n                clickedMarkerImage = clicked_largest_icon;\r\n              } else if (markerData.maxTotalSubsidy >= 50000000) {\r\n                clickedMarkerImage = clicked_middle_icon;\r\n              } else {\r\n                clickedMarkerImage = clicked_low_icon;\r\n              }\r\n              marker.setImage(\r\n                new window.kakao.maps.MarkerImage(\r\n                  clickedMarkerImage,\r\n                  new window.kakao.maps.Size(24, 35)\r\n                )\r\n              );\r\n\r\n              if (clickMarker && clickMarker.marker === marker) {\r\n                marker.setImage(\r\n                  new window.kakao.maps.MarkerImage(\r\n                    markerImage,\r\n                    new window.kakao.maps.Size(24, 35)\r\n                  )\r\n                );\r\n                setClickMarker(null);\r\n                return;\r\n              }\r\n\r\n              setClickMarker({ marker, data: markerData });\r\n\r\n              console.log(\"Marker Data:\", markerData);\r\n\r\n              try {\r\n                const orgSubsidies = await Promise.all(\r\n                  markerData.organizations.map(async (org) => {\r\n                    const subsidyPromises = org.subsidies.map(async (sub) => {\r\n                      try {\r\n                        const subsidyResponse = await fetch(\r\n                          `${process.env.REACT_APP_API_URL}/api/subsidy/${sub.id}`\r\n                        );\r\n                        if (subsidyResponse.ok) {\r\n                          return await subsidyResponse.json();\r\n                        } else {\r\n                          console.error(\r\n                            `Failed to fetch subsidy details for subsidy ID: ${sub.id}`\r\n                          );\r\n                          return null;\r\n                        }\r\n                      } catch (subError) {\r\n                        console.error(\r\n                          `Error fetching subsidy details for subsidy ID: ${sub.id}`,\r\n                          subError\r\n                        );\r\n                        return null;\r\n                      }\r\n                    });\r\n                    return {\r\n                      ...org,\r\n                      subsidies: await Promise.all(subsidyPromises).then(\r\n                        (results) => results.filter((res) => res !== null)\r\n                      ),\r\n                    };\r\n                  })\r\n                );\r\n\r\n                setSelectedMarker({\r\n                  ...markerData,\r\n                  organizations: orgSubsidies,\r\n                });\r\n              } catch (orgError) {\r\n                console.error(\r\n                  \"Error fetching organizations subsidies details:\",\r\n                  orgError\r\n                );\r\n              }\r\n            });\r\n\r\n            newMarkers.push(marker);\r\n          }\r\n        });\r\n\r\n        setMarkers(newMarkers);\r\n      } else {\r\n        throw new Error(\"Failed to fetch markers\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching organizations within bounds:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY}&autoload=false`;\r\n    document.head.appendChild(script);\r\n\r\n    script.onload = () => {\r\n      window.kakao.maps.load(async () => {\r\n        const options = {\r\n          center: new window.kakao.maps.LatLng(\r\n            coordinates.lat,\r\n            coordinates.lng\r\n          ),\r\n          level: 4,\r\n        };\r\n        const map = new window.kakao.maps.Map(mapContainerRef.current, options);\r\n        mapRef.current = map;\r\n\r\n        loadMarkers(map);\r\n\r\n        window.kakao.maps.event.addListener(map, \"bounds_changed\", () =>\r\n          loadMarkers(map)\r\n        );\r\n      });\r\n    };\r\n  }, [coordinates, selectedDepartment]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mapContainerRef} className=\"map-container\"></div>\r\n      {selectedMarker && (\r\n        <Sidebar marker={selectedMarker} onClose={closeSidebar} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}